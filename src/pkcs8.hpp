// pkcs8.hpp
//
// pkcs/pkix/x509 rsa private key encoding and decoding

#ifndef PKCS8_HPP
#define PKCS8_HPP

#include "libmerc/datum.h"
#include "libmerc/asn1.h"
#include "libmerc/json_object.h"
#include "libmerc/base64.h"
#include "pem.hpp"

// ASN.1 defintions, following RFC 3447
//
// Version ::= INTEGER { two-prime(0), multi(1) }
//     (CONSTRAINED BY
//     {-- version must be multi if otherPrimeInfos present --})
//
// RSAPrivateKey ::= SEQUENCE {
//     version           Version,
//     modulus           INTEGER,  -- n
//     publicExponent    INTEGER,  -- e
//     privateExponent   INTEGER,  -- d
//     prime1            INTEGER,  -- p
//     prime2            INTEGER,  -- q
//     exponent1         INTEGER,  -- d mod (p-1)
//     exponent2         INTEGER,  -- d mod (q-1)
//     coefficient       INTEGER,  -- (inverse of q) mod p
//     otherPrimeInfos   OtherPrimeInfos OPTIONAL
// }
//

class rsa_private_key {
    tlv sequence;
    tlv version;
    tlv modulus;
    tlv public_exponent;
    tlv private_exponent;
    tlv prime1;
    tlv prime2;
    tlv exponent1;
    tlv exponent2;
    tlv coefficient;
    // no other prime info for now

    static constexpr std::array<uint8_t, 1> vers{ 0x00 };
    static constexpr std::array<uint8_t, 3> pub_exp{ 0x01, 0x00, 0x01};
    static constexpr std::array<uint8_t, 0> nil{};

public:
    rsa_private_key(datum &d) {
        sequence.parse(&d, tlv::SEQUENCE);
        version.parse(&sequence.value, tlv::INTEGER);
        modulus.parse(&sequence.value, tlv::INTEGER);
        public_exponent.parse(&sequence.value, tlv::INTEGER);
        private_exponent.parse(&sequence.value, tlv::INTEGER);
        prime1.parse(&sequence.value, tlv::INTEGER);
        prime2.parse(&sequence.value, tlv::INTEGER);
        exponent1.parse(&sequence.value, tlv::INTEGER);
        exponent2.parse(&sequence.value, tlv::INTEGER);
        coefficient.parse(&sequence.value, tlv::INTEGER);
    }

    rsa_private_key(datum mod,
                    datum priv_exp,
                    datum p1,
                    datum p2,
                    datum e1,
                    datum e2,
                    datum coef) :
        sequence{},
        version{tlv::INTEGER, datum{vers}},
        modulus{tlv::INTEGER, mod},
        public_exponent{tlv::INTEGER, pub_exp},
        private_exponent{tlv::INTEGER, priv_exp},
        prime1{tlv::INTEGER, p1},
        prime2{tlv::INTEGER, p2},
        exponent1{tlv::INTEGER, e1},
        exponent2{tlv::INTEGER, e2},
        coefficient{tlv::INTEGER, coef}
    {
        // datum_array<1> v{ { 0x00  }};
        // datum_array<3> pe{{  0x01, 0x00, 0x01} };
        // sequence.parse(&d, tlv::SEQUENCE);
        //version.set(tlv::INTEGER, v);
        //public_exponent.set(tlv::INTEGER, pe);
        //private_exponent.parse(&sequence.value, tlv::INTEGER);
        //prime1.parse(&sequence.value, tlv::INTEGER);
        //prime2.parse(&sequence.value, tlv::INTEGER);
        //exponent1.parse(&sequence.value, tlv::INTEGER);
        //exponent2.parse(&sequence.value, tlv::INTEGER);
        //coefficient.parse(&sequence.value, tlv::INTEGER);

        sequence.tag = tlv::SEQUENCE;
        sequence.length =
            version.encoded_length() +
            modulus.encoded_length() +
            public_exponent.encoded_length() +
            private_exponent.encoded_length() +
            prime1.encoded_length() +
            prime2.encoded_length() +
            exponent1.encoded_length() +
            exponent2.encoded_length() +
            coefficient.encoded_length();
        sequence.value = { nullptr, nullptr };

        // fprintf(stderr, "constructor\n");
        // fprintf(stderr, "version.length: %lu\n", version.length);
        // fprintf(stderr, "modulus.length: %lu\n", modulus.length);
        // fprintf(stderr, "public_exponent.length: %lu\n", public_exponent.length);
        // fprintf(stderr, "private_exponent.length: %lu\n", private_exponent.length);
        // fprintf(stderr, "sequence.tag:    %02x\n", sequence.tag);
        // fprintf(stderr, "sequence.length: %lu\n", sequence.length);
    }

    size_t encoded_length() const {
        return sizeof(tlv::tag) + tlv::length_of_length_field(sequence.length) + sequence.length;
    }

    bool is_valid() const { return coefficient.is_not_null(); }

    void write_json(json_object &o) const {
        o.print_key_hex("version", version.value);
        o.print_key_hex("modulus", modulus.value);
        o.print_key_hex("public_exponent", public_exponent.value);
        o.print_key_hex("private_exponent", private_exponent.value);
        o.print_key_hex("prime1", prime1.value);
        o.print_key_hex("prime2", prime2.value);
        o.print_key_hex("exponent1", exponent1.value);
        o.print_key_hex("exponent2", exponent2.value);
        o.print_key_hex("coefficient", coefficient.value);
    }

    void fprint(FILE *f) const {
        fprintf(stderr, "version:\t"); version.value.fprint_hex(f); fputc('\n', f);
        fprintf(stderr, "modulus:\t"); modulus.value.fprint_hex(f); fputc('\n', f);
        fprintf(stderr, "public_exponent:\t"); public_exponent.value.fprint_hex(f); fputc('\n', f);
        fprintf(stderr, "private_exponent:\t"); private_exponent.value.fprint_hex(f); fputc('\n', f);
        fprintf(stderr, "prime1:\t"); prime1.value.fprint_hex(f); fputc('\n', f);
        fprintf(stderr, "prime2:\t"); prime2.value.fprint_hex(f); fputc('\n', f);
        fprintf(stderr, "exponent1:\t"); exponent1.value.fprint_hex(f); fputc('\n', f);
        fprintf(stderr, "exponent2:\t"); exponent2.value.fprint_hex(f); fputc('\n', f);
        fprintf(stderr, "coefficient:\t"); coefficient.value.fprint_hex(f); fputc('\n', f);
    }

    void write(writeable &buf) const {

        if (!is_valid()) {
            fprintf(stderr, "rsa_private_key object is not valid\n");
            //buf.set_null();
            //return;
        }
        // fprintf(stderr, "%s\n", __func__);
        // fprintf(stderr, "sequence.tag: %02x\n", sequence.tag);
        // fprintf(stderr, "sequence.length: %lu\n", sequence.length);
        sequence.write_tag_and_length(buf);
        buf << version;
        buf << modulus;
        buf << public_exponent;
        buf << private_exponent;
        buf << prime1;
        buf << prime2;
        buf << exponent1;
        buf << exponent2;
        buf << coefficient;

    }

    // rsa_private_key::unit_test() is a static member function that
    // performs a unit test of the rsa_private_key class and returns
    // true if the unit tests passed, and false otherwise
    //
    static bool unit_test(bool verbose=false) {
        uint8_t RSA_PRIVATE_KEY[] = {
            0x30, 0x82, 0x04, 0xa3, 0x02, 0x01, 0x00, 0x02,
            0x82, 0x01, 0x01, 0x00, 0xaa, 0x0e, 0xc3, 0xfa,
            0x6b, 0xbd, 0x81, 0x4f, 0x17, 0x2a, 0x8e, 0xbe,
            0x8d, 0x90, 0xfd, 0xb1, 0x57, 0x7d, 0xaa, 0x72,
            0x9e, 0x27, 0x79, 0xbb, 0xff, 0xde, 0xae, 0x96,
            0x39, 0x00, 0x5d, 0xbd, 0xd6, 0xca, 0xb1, 0xe8,
            0x22, 0x5b, 0x95, 0x84, 0xc1, 0x54, 0x3b, 0x0a,
            0xab, 0x88, 0x28, 0xfc, 0xfb, 0xe8, 0x59, 0x80,
            0xdf, 0xc2, 0x55, 0xa6, 0x83, 0xc5, 0x4e, 0x1f,
            0x1f, 0x64, 0x95, 0x40, 0x99, 0xb2, 0x03, 0x7e,
            0xee, 0xef, 0x1f, 0xf8, 0xf7, 0xfc, 0x10, 0x79,
            0xbe, 0xeb, 0x36, 0xc6, 0xa8, 0x8e, 0x09, 0xec,
            0x50, 0x01, 0x45, 0xe7, 0xd6, 0x72, 0xb4, 0x0e,
            0x8e, 0x29, 0xde, 0x2e, 0x76, 0x9e, 0xea, 0x4c,
            0x9a, 0xf6, 0x24, 0x6b, 0x0e, 0x8f, 0xc0, 0x4b,
            0x19, 0x9f, 0xd5, 0x33, 0xc0, 0x1c, 0x77, 0x2f,
            0xb1, 0x37, 0x62, 0x13, 0xb4, 0xb0, 0xcb, 0x3d,
            0x82, 0x6e, 0xe5, 0xa9, 0x8f, 0x07, 0x0d, 0x1e,
            0x60, 0x3a, 0xd0, 0xb9, 0x64, 0xdd, 0x49, 0xbf,
            0x07, 0x75, 0x42, 0x4b, 0x35, 0x7b, 0x7b, 0x59,
            0x7a, 0x5f, 0x23, 0x65, 0xbe, 0xc0, 0x4b, 0x5d,
            0x3a, 0x17, 0x2a, 0xff, 0x89, 0xed, 0x10, 0xa6,
            0x72, 0x94, 0x13, 0xff, 0x27, 0xee, 0xcc, 0xe0,
            0x00, 0xc7, 0x07, 0xbb, 0xe8, 0x43, 0x71, 0x59,
            0x21, 0xca, 0xd8, 0x15, 0xe3, 0xb5, 0x95, 0xf4,
            0x2d, 0xfa, 0xf9, 0x1f, 0x77, 0xcb, 0x93, 0xcc,
            0x52, 0x09, 0x8b, 0x50, 0x87, 0x74, 0x60, 0xb2,
            0xc1, 0xd2, 0xe6, 0xf9, 0xa4, 0x3d, 0xbb, 0xc8,
            0x13, 0xbc, 0x5e, 0xc9, 0xf0, 0x0f, 0xb6, 0x28,
            0x68, 0x3a, 0x42, 0xe4, 0x0c, 0xbf, 0x50, 0xc1,
            0x7b, 0xae, 0x75, 0xea, 0x1c, 0x21, 0x21, 0x56,
            0x47, 0x24, 0x9e, 0x1e, 0x66, 0xb9, 0x38, 0xfb,
            0x4d, 0x85, 0x0d, 0xdb, 0x68, 0x60, 0x0e, 0x4b,
            0x7d, 0xf4, 0x35, 0x4d, 0x02, 0x03, 0x01, 0x00,
            0x01, 0x02, 0x82, 0x01, 0x00, 0x5c, 0xe3, 0x25,
            0xce, 0xe2, 0x0c, 0xa7, 0xd5, 0xe0, 0x8c, 0x81,
            0x5d, 0xba, 0x0b, 0xc9, 0x56, 0x95, 0xb8, 0x71,
            0x62, 0x9b, 0xda, 0x6a, 0x16, 0xf3, 0x42, 0xd9,
            0xcf, 0xfa, 0x20, 0xa6, 0x13, 0x6c, 0x80, 0x58,
            0xbe, 0xb8, 0x0d, 0x98, 0x54, 0xe4, 0x18, 0xb3,
            0x0b, 0x37, 0xf8, 0x6e, 0x93, 0x08, 0xb1, 0xb8,
            0x39, 0xb9, 0x7e, 0xf7, 0xb3, 0xb5, 0x64, 0x0f,
            0x30, 0xd6, 0xbf, 0xe4, 0xfa, 0x5d, 0x39, 0x2b,
            0xc9, 0xa8, 0x8e, 0xfa, 0xc2, 0xce, 0x09, 0x63,
            0xa2, 0x6c, 0x53, 0x24, 0x1f, 0x4c, 0xb0, 0x10,
            0xe1, 0x80, 0x2d, 0xc1, 0xd6, 0x49, 0x7f, 0x6b,
            0xb4, 0x4b, 0x98, 0xb8, 0xe0, 0x5e, 0x30, 0x9d,
            0x3f, 0xec, 0xa0, 0xa7, 0xf1, 0xc6, 0x09, 0x64,
            0xfa, 0x60, 0x6b, 0xba, 0x53, 0xc3, 0x0a, 0x89,
            0x5b, 0x86, 0x8b, 0xfe, 0xc9, 0x4e, 0xb8, 0x06,
            0xbb, 0x79, 0x44, 0x43, 0xb2, 0xfe, 0x66, 0xc4,
            0xfb, 0xc2, 0x60, 0xb1, 0xbd, 0x33, 0x36, 0xfd,
            0xc2, 0xc6, 0x24, 0x11, 0xa1, 0xa1, 0xa2, 0x6b,
            0x1d, 0xfd, 0x69, 0x3b, 0xc9, 0xed, 0x62, 0xcb,
            0xe8, 0x27, 0xba, 0x03, 0x32, 0xa7, 0xdd, 0xa8,
            0x1e, 0xd2, 0xa8, 0xa4, 0x3e, 0xe9, 0xfa, 0x0b,
            0x30, 0x2a, 0x11, 0x73, 0x88, 0x43, 0xc7, 0x6d,
            0x4b, 0x74, 0x86, 0xbd, 0x0c, 0x20, 0xfb, 0xe1,
            0xaf, 0x22, 0x05, 0x1e, 0x01, 0x29, 0x6b, 0x29,
            0x0e, 0x31, 0xa2, 0xba, 0xe4, 0x64, 0x67, 0xf0,
            0xb8, 0x12, 0x91, 0xff, 0xf1, 0x11, 0xc0, 0x2e,
            0x33, 0xbb, 0x7d, 0x50, 0xea, 0x1f, 0x04, 0x8c,
            0x41, 0x53, 0x0d, 0x31, 0x79, 0x15, 0x4c, 0xf9,
            0x48, 0x5d, 0x52, 0x49, 0x69, 0xde, 0xab, 0x38,
            0x7d, 0x74, 0x66, 0x43, 0x4d, 0x74, 0xc6, 0xf3,
            0x76, 0x9e, 0x21, 0x5c, 0xd7, 0x7c, 0xe7, 0xef,
            0xad, 0x02, 0x4e, 0x33, 0x41, 0x02, 0x81, 0x81,
            0x00, 0xe1, 0xa7, 0xc4, 0x76, 0x8a, 0xed, 0x7b,
            0x7e, 0x83, 0xff, 0xab, 0x29, 0x60, 0x9c, 0x72,
            0xc3, 0xb8, 0x2c, 0x25, 0x08, 0x7a, 0xc3, 0xff,
            0x64, 0x5c, 0xa7, 0xcf, 0xd3, 0x3e, 0x72, 0xf5,
            0xb0, 0x2a, 0x27, 0x62, 0x5f, 0x69, 0x65, 0xcc,
            0xa8, 0x34, 0x9f, 0x96, 0xa5, 0x09, 0x02, 0xff,
            0x20, 0x0d, 0xd0, 0x3a, 0x0f, 0xf2, 0xe9, 0xe1,
            0xad, 0x21, 0xa1, 0xc2, 0x64, 0x18, 0x0f, 0xad,
            0x40, 0xed, 0x8e, 0xcd, 0x31, 0x45, 0x55, 0x6d,
            0x38, 0x9f, 0xe3, 0xa1, 0x0d, 0x4a, 0xb1, 0xc2,
            0xad, 0xbf, 0x02, 0x6e, 0x95, 0xbb, 0x4d, 0x34,
            0xcb, 0x5c, 0x9b, 0x47, 0x1e, 0x9c, 0x26, 0xc4,
            0xd9, 0x97, 0x13, 0x07, 0x12, 0x8f, 0x6c, 0x09,
            0xa6, 0x63, 0x32, 0xd0, 0xf1, 0x96, 0x35, 0xe0,
            0x5a, 0x93, 0xe2, 0x04, 0x41, 0xe6, 0xaf, 0x81,
            0x0f, 0x6c, 0xe0, 0xdb, 0x51, 0x3c, 0x73, 0x45,
            0x1d, 0x02, 0x81, 0x81, 0x00, 0xc0, 0xed, 0x09,
            0x6e, 0xe0, 0x67, 0xaf, 0x65, 0x64, 0xdd, 0x95,
            0x79, 0xae, 0xe4, 0xb6, 0x58, 0x12, 0xd4, 0xf1,
            0x2d, 0x87, 0xdc, 0x5a, 0x69, 0x92, 0x3b, 0xe3,
            0x22, 0x93, 0x68, 0x75, 0x61, 0xd4, 0xde, 0x1a,
            0x60, 0x0b, 0xc7, 0xd3, 0xee, 0xd4, 0xc0, 0x6a,
            0xfc, 0x29, 0x7e, 0x11, 0x1b, 0x53, 0x51, 0x96,
            0xe1, 0x46, 0x25, 0xed, 0x48, 0xf0, 0xee, 0xff,
            0xb7, 0x38, 0x6c, 0x4b, 0x37, 0x6d, 0xe8, 0x83,
            0xa1, 0x42, 0x60, 0x2b, 0x92, 0xad, 0xa4, 0xc0,
            0x13, 0x49, 0xb3, 0xf8, 0xaf, 0xbe, 0xfa, 0x11,
            0x04, 0x97, 0xbe, 0xdd, 0x29, 0xd5, 0xe4, 0xdf,
            0xb3, 0xf2, 0xf9, 0xec, 0x15, 0xcf, 0x84, 0x1f,
            0x05, 0xc5, 0xd4, 0x83, 0xad, 0x5e, 0xb7, 0x02,
            0xc6, 0x21, 0x59, 0x19, 0x7d, 0xc4, 0x7d, 0xf0,
            0xa3, 0x73, 0x1e, 0xd8, 0x63, 0x79, 0x1d, 0xb1,
            0x38, 0xe7, 0x10, 0xa9, 0xf1, 0x02, 0x81, 0x80,
            0x30, 0xdf, 0x57, 0x0b, 0x9d, 0x97, 0x45, 0xb1,
            0xe7, 0x00, 0xce, 0x9f, 0x4d, 0x8f, 0x54, 0xc3,
            0xd2, 0xf5, 0xac, 0xa7, 0xa3, 0x7f, 0x23, 0xa7,
            0x26, 0xf2, 0x29, 0x6e, 0xc5, 0x0d, 0xbc, 0xec,
            0x84, 0x94, 0xb7, 0x17, 0x97, 0x0a, 0x37, 0x43,
            0x0e, 0xf2, 0xa9, 0x7b, 0xe0, 0xf1, 0xc7, 0x33,
            0xb8, 0x0a, 0x2b, 0x29, 0x1d, 0x21, 0x4e, 0x81,
            0x62, 0xd1, 0x57, 0xfa, 0xb9, 0xc3, 0x5b, 0x70,
            0xbe, 0x82, 0xb9, 0x2a, 0x3c, 0xab, 0xfd, 0xd5,
            0xcf, 0xbb, 0x4b, 0x3c, 0x47, 0xbb, 0x2c, 0x40,
            0xd9, 0x27, 0xbb, 0xaf, 0xae, 0x3b, 0x50, 0x7d,
            0xe2, 0xf6, 0xb6, 0x76, 0x88, 0xb7, 0x54, 0xd7,
            0x13, 0x83, 0x49, 0x7a, 0xd9, 0x99, 0x3a, 0x95,
            0xd0, 0xd2, 0x46, 0xb2, 0xac, 0x27, 0xcb, 0x09,
            0x93, 0x11, 0xd6, 0x7e, 0x37, 0x6a, 0x37, 0x77,
            0x91, 0xcb, 0x39, 0x74, 0xe4, 0xb4, 0xca, 0x79,
            0x02, 0x81, 0x80, 0x7e, 0x9a, 0x4e, 0xa9, 0x6b,
            0x2b, 0xbf, 0x87, 0x1b, 0x44, 0xe9, 0xf5, 0x5b,
            0x57, 0x0d, 0x6e, 0x08, 0x95, 0xa2, 0xdb, 0x4d,
            0x1f, 0xc6, 0x59, 0x27, 0x34, 0x93, 0x9e, 0x39,
            0xfb, 0xbf, 0xa3, 0xfe, 0xab, 0xed, 0xc4, 0xff,
            0x96, 0x17, 0xb6, 0xcf, 0xf8, 0xa1, 0x7c, 0x6e,
            0xc2, 0x22, 0xf9, 0xba, 0x98, 0x7d, 0x19, 0xc2,
            0x0d, 0xdb, 0x84, 0x15, 0x4f, 0xd1, 0x91, 0x6b,
            0xbe, 0x6d, 0x31, 0xa7, 0xb7, 0x80, 0xc1, 0xcf,
            0x2c, 0x0b, 0x0c, 0x0b, 0x55, 0x65, 0x12, 0x83,
            0x38, 0x4e, 0x47, 0x0e, 0x5d, 0x4d, 0xd3, 0xa4,
            0xbd, 0x04, 0xa7, 0x92, 0x8c, 0xca, 0x5c, 0x6d,
            0x63, 0xa2, 0x90, 0xc1, 0x88, 0x23, 0x4f, 0x87,
            0x7e, 0x29, 0x17, 0x19, 0x63, 0xa1, 0xb7, 0x61,
            0x64, 0xf5, 0xfc, 0x79, 0x78, 0x67, 0xf4, 0xea,
            0xf3, 0xdf, 0xee, 0x8f, 0x29, 0x74, 0x06, 0x32,
            0x63, 0xd6, 0x11, 0x02, 0x81, 0x81, 0x00, 0x9c,
            0x2c, 0x77, 0xb4, 0x8e, 0xe5, 0x12, 0xbe, 0x36,
            0x65, 0xfe, 0xef, 0x41, 0x41, 0x06, 0xa4, 0x1a,
            0xb0, 0x69, 0xde, 0xdd, 0x6b, 0x3a, 0x9f, 0xe7,
            0xa7, 0x29, 0x80, 0x55, 0xb9, 0x5c, 0xe7, 0x74,
            0x8f, 0x25, 0x0e, 0x88, 0x68, 0x8b, 0xdc, 0x38,
            0x85, 0xf1, 0xec, 0xd6, 0x79, 0xf5, 0x56, 0xf4,
            0xb2, 0x9e, 0xaf, 0x72, 0xe2, 0x62, 0xe9, 0x20,
            0x69, 0xcc, 0xeb, 0xe3, 0xc7, 0x76, 0x48, 0xd5,
            0xb1, 0xe6, 0xfb, 0xc2, 0x42, 0x15, 0x0f, 0xff,
            0xe4, 0x16, 0xd2, 0xfc, 0x75, 0x16, 0xd9, 0xd4,
            0x1f, 0x2d, 0x1f, 0xcb, 0x31, 0xc3, 0xdf, 0xdf,
            0xe0, 0x4b, 0xdc, 0x21, 0x68, 0x86, 0xc7, 0xab,
            0x5c, 0x5b, 0x69, 0x19, 0x0a, 0xa6, 0x8d, 0xb9,
            0x93, 0x01, 0x3f, 0x52, 0xe3, 0xdb, 0xc1, 0x2a,
            0x9f, 0x6a, 0xb5, 0x9d, 0x3f, 0xea, 0x22, 0xae,
            0x29, 0x34, 0xb4, 0x4f, 0x9d, 0x0a, 0xde
        };
        datum f{RSA_PRIVATE_KEY, RSA_PRIVATE_KEY + sizeof(RSA_PRIVATE_KEY)};
        rsa_private_key rsa_priv{f};
        data_buffer<4096> dbuf;
        rsa_priv.write(dbuf);
        datum result = dbuf.contents();

        // create a second DER encoded version of rsa_priv, then
        // compare to original
        //
        data_buffer<4096> dbuf2;
        rsa_priv.write(dbuf2);
        datum result2 = dbuf2.contents();

        if (dbuf != dbuf2) {
            if (verbose) {
                fprintf(stdout, "failure: result != result2\n          ");
                for (ssize_t i=0; i<std::min(dbuf.readable_length(), dbuf2.readable_length()); i++) {
                    if (dbuf.buffer[i] == dbuf2.buffer[i]) {
                        fprintf(stdout, "%02x", dbuf.buffer[i]);
                    } else {
                        fprintf(stdout, "**");
                    }
                }
                fputc('\n', stdout);
                fprintf(stdout, "result:   "); result.fprint_hex(stdout); fputc('\n', stdout);
                fprintf(stdout, "result2:  "); result2.fprint_hex(stdout); fputc('\n', stdout);
            }
            return false;
        }

        return true;
    }

};

// PrivateKeyInfo, following RFC 5208
//
// PKCS-8 {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-8(8)
//          modules(1) pkcs-8(1)}
//
// -- $Revision: 1.5 $
//
// -- This module has been checked for conformance with the ASN.1
// -- standard by the OSS ASN.1 Tools
//
// DEFINITIONS IMPLICIT TAGS ::=
//
// BEGIN
//
// -- EXPORTS All --
// -- All types and values defined in this module is exported for use in
// -- other ASN.1 modules.
//
// IMPORTS
//
// informationFramework
//          FROM UsefulDefinitions {joint-iso-itu-t(2) ds(5) module(1)
//                                  usefulDefinitions(0) 3}
//
// Attribute
//          FROM InformationFramework informationFramework
//
// AlgorithmIdentifier, ALGORITHM-IDENTIFIER
//          FROM PKCS-5 {iso(1) member-body(2) us(840) rsadsi(113549)
//          pkcs(1) pkcs-5(5) modules(16) pkcs-5(1)};
//
// -- Private-key information syntax
//
// PrivateKeyInfo ::= SEQUENCE {
//    version Version,
//    privateKeyAlgorithm AlgorithmIdentifier {{PrivateKeyAlgorithms}},
//    privateKey PrivateKey,
//    attributes [0] Attributes OPTIONAL }
//
// Version ::= INTEGER {v1(0)} (v1,...)
//
// PrivateKey ::= OCTET STRING
//
// Attributes ::= SET OF Attribute

class private_key_info {
    tlv sequence;
    tlv version;
    tlv algorithm_identifier_sequence;
    tlv alg_id;
    tlv null_tag;
    tlv private_key_string;
    datum tmp;
    //
    // optional attributes are not yet supported

    rsa_private_key rsa_priv;
    bool valid = false;

    static constexpr std::array<uint8_t, 1> vers{ 0x00 };
    static constexpr std::array<uint8_t, 0> null{ };
    static constexpr std::array<uint8_t, 9> rsa_alg_id{ 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01 };

public:

    private_key_info(datum &d) :
        sequence{d, tlv::SEQUENCE, "sequence"},
        version{sequence, tlv::INTEGER, "version"},
        algorithm_identifier_sequence{sequence, tlv::SEQUENCE, "alg_id_sequence"},
        alg_id{algorithm_identifier_sequence, tlv::OBJECT_IDENTIFIER, "alg_id"},
        null_tag{algorithm_identifier_sequence, tlv::NULL_TAG, "null"},
        private_key_string{sequence, tlv::OCTET_STRING, "priv_key"},
        tmp{private_key_string.value},
        rsa_priv{tmp}

        // TODO: set valid here?

        //        rsa_priv{private_key_string.value}

    {
        // sequence.parse(&d, tlv::SEQUENCE, "sequence");
        // version.parse(&sequence.value, tlv::INTEGER, "version");
        // algorithm_identifier_sequence.parse(&sequence.value, tlv::SEQUENCE, "alg_id_sequence");
        // alg_id.parse(&algorithm_identifier_sequence.value, tlv::OBJECT_IDENTIFIER, "alg_id");
        // algorithm_identifier_sequence.value.fprint_hex(stderr); fputc('\n', stderr);
        // null_tag.parse(&algorithm_identifier_sequence.value, tlv::NULL_TAG, "null");
        // private_key_string.parse(&sequence.value, tlv::OCTET_STRING, "priv_key");

        // datum tmp = private_key_string.value;
        // fprintf(stderr, "tmp:\t"); tmp.fprint_hex(stderr); fputc('\n', stderr);
        // rsa_private_key rsa_priv{tmp};                             // TODO: move out of constructor
        // valid = true;

        valid = algorithm_identifier_sequence.value.is_not_null() && private_key_string.value.is_not_null();
    }

    private_key_info(rsa_private_key &key) :
        sequence{},
        version{tlv::INTEGER, datum{vers}},
        algorithm_identifier_sequence{},
        alg_id{tlv::OBJECT_IDENTIFIER, datum{rsa_alg_id}},
        null_tag{tlv::NULL_TAG, null},
        private_key_string{},  // note: not actually initialized
        rsa_priv{key}
    {

        // construct algorithm_identifier
        //
        algorithm_identifier_sequence.tag = tlv::SEQUENCE;
        algorithm_identifier_sequence.length =
            alg_id.encoded_length() +
            null_tag.encoded_length();

        // construct private key octet string from private key
        //
        private_key_string.tag = tlv::OCTET_STRING;
        private_key_string.length =
            sizeof(tlv::tag) +
            rsa_priv.encoded_length();
        //
        // TODO: verify length accounting; should we use length_of_length()?
        //

        // construct outer sequence for private_key_info
        //
        sequence.tag = tlv::SEQUENCE;
        sequence.length =
            sizeof(tlv::tag) +
            version.encoded_length() +
            algorithm_identifier_sequence.encoded_length() +
            private_key_string.encoded_length();


        valid = true;  // TODO: this should be conditional
    }

    const rsa_private_key &get_rsa_private_key() const {
        return rsa_priv;
    }

    bool is_valid() const { return valid; }

    void write(writeable &buf) const {

        if (!is_valid()) {
            fprintf(stderr, "private_key_info object is not valid\n");
            //buf.set_null();
            //return;
        }
        // fprintf(stdout, "%s\n", __func__);
        // fprintf(stdout, "sequence.tag: %02x\n", sequence.tag);
        // fprintf(stdout, "sequence.length: %lu\n", sequence.length);
        sequence.write_tag_and_length(buf);
        buf << version
            << algorithm_identifier_sequence
            << alg_id
            << null_tag;
        // fprintf(stdout, "%s\n", __func__);
        // fprintf(stdout, "private_key_string.tag: %02x\n", private_key_string.tag);
        // fprintf(stdout, "private_key_string.length: %lu\n", private_key_string.length);
        private_key_string.write_tag_and_length(buf);
        buf << rsa_priv;
        //            << private_key_string;

    }

#ifndef NDEBUG

    // private_key_info::unit_test() returns true if the unit tests
    // passed, and false otherwise
    //
    static bool unit_test(bool verbose=false) {
        uint8_t PRIVATE_KEY[] = {
            0x30, 0x82, 0x04, 0xbd, 0x02, 0x01, 0x00, 0x30,
            0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7,
            0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x04, 0x82,
            0x04, 0xa7, 0x30, 0x82, 0x04, 0xa3, 0x02, 0x01,
            0x00, 0x02, 0x82, 0x01, 0x01, 0x00, 0xaa, 0x0e,
            0xc3, 0xfa, 0x6b, 0xbd, 0x81, 0x4f, 0x17, 0x2a,
            0x8e, 0xbe, 0x8d, 0x90, 0xfd, 0xb1, 0x57, 0x7d,
            0xaa, 0x72, 0x9e, 0x27, 0x79, 0xbb, 0xff, 0xde,
            0xae, 0x96, 0x39, 0x00, 0x5d, 0xbd, 0xd6, 0xca,
            0xb1, 0xe8, 0x22, 0x5b, 0x95, 0x84, 0xc1, 0x54,
            0x3b, 0x0a, 0xab, 0x88, 0x28, 0xfc, 0xfb, 0xe8,
            0x59, 0x80, 0xdf, 0xc2, 0x55, 0xa6, 0x83, 0xc5,
            0x4e, 0x1f, 0x1f, 0x64, 0x95, 0x40, 0x99, 0xb2,
            0x03, 0x7e, 0xee, 0xef, 0x1f, 0xf8, 0xf7, 0xfc,
            0x10, 0x79, 0xbe, 0xeb, 0x36, 0xc6, 0xa8, 0x8e,
            0x09, 0xec, 0x50, 0x01, 0x45, 0xe7, 0xd6, 0x72,
            0xb4, 0x0e, 0x8e, 0x29, 0xde, 0x2e, 0x76, 0x9e,
            0xea, 0x4c, 0x9a, 0xf6, 0x24, 0x6b, 0x0e, 0x8f,
            0xc0, 0x4b, 0x19, 0x9f, 0xd5, 0x33, 0xc0, 0x1c,
            0x77, 0x2f, 0xb1, 0x37, 0x62, 0x13, 0xb4, 0xb0,
            0xcb, 0x3d, 0x82, 0x6e, 0xe5, 0xa9, 0x8f, 0x07,
            0x0d, 0x1e, 0x60, 0x3a, 0xd0, 0xb9, 0x64, 0xdd,
            0x49, 0xbf, 0x07, 0x75, 0x42, 0x4b, 0x35, 0x7b,
            0x7b, 0x59, 0x7a, 0x5f, 0x23, 0x65, 0xbe, 0xc0,
            0x4b, 0x5d, 0x3a, 0x17, 0x2a, 0xff, 0x89, 0xed,
            0x10, 0xa6, 0x72, 0x94, 0x13, 0xff, 0x27, 0xee,
            0xcc, 0xe0, 0x00, 0xc7, 0x07, 0xbb, 0xe8, 0x43,
            0x71, 0x59, 0x21, 0xca, 0xd8, 0x15, 0xe3, 0xb5,
            0x95, 0xf4, 0x2d, 0xfa, 0xf9, 0x1f, 0x77, 0xcb,
            0x93, 0xcc, 0x52, 0x09, 0x8b, 0x50, 0x87, 0x74,
            0x60, 0xb2, 0xc1, 0xd2, 0xe6, 0xf9, 0xa4, 0x3d,
            0xbb, 0xc8, 0x13, 0xbc, 0x5e, 0xc9, 0xf0, 0x0f,
            0xb6, 0x28, 0x68, 0x3a, 0x42, 0xe4, 0x0c, 0xbf,
            0x50, 0xc1, 0x7b, 0xae, 0x75, 0xea, 0x1c, 0x21,
            0x21, 0x56, 0x47, 0x24, 0x9e, 0x1e, 0x66, 0xb9,
            0x38, 0xfb, 0x4d, 0x85, 0x0d, 0xdb, 0x68, 0x60,
            0x0e, 0x4b, 0x7d, 0xf4, 0x35, 0x4d, 0x02, 0x03,
            0x01, 0x00, 0x01, 0x02, 0x82, 0x01, 0x00, 0x5c,
            0xe3, 0x25, 0xce, 0xe2, 0x0c, 0xa7, 0xd5, 0xe0,
            0x8c, 0x81, 0x5d, 0xba, 0x0b, 0xc9, 0x56, 0x95,
            0xb8, 0x71, 0x62, 0x9b, 0xda, 0x6a, 0x16, 0xf3,
            0x42, 0xd9, 0xcf, 0xfa, 0x20, 0xa6, 0x13, 0x6c,
            0x80, 0x58, 0xbe, 0xb8, 0x0d, 0x98, 0x54, 0xe4,
            0x18, 0xb3, 0x0b, 0x37, 0xf8, 0x6e, 0x93, 0x08,
            0xb1, 0xb8, 0x39, 0xb9, 0x7e, 0xf7, 0xb3, 0xb5,
            0x64, 0x0f, 0x30, 0xd6, 0xbf, 0xe4, 0xfa, 0x5d,
            0x39, 0x2b, 0xc9, 0xa8, 0x8e, 0xfa, 0xc2, 0xce,
            0x09, 0x63, 0xa2, 0x6c, 0x53, 0x24, 0x1f, 0x4c,
            0xb0, 0x10, 0xe1, 0x80, 0x2d, 0xc1, 0xd6, 0x49,
            0x7f, 0x6b, 0xb4, 0x4b, 0x98, 0xb8, 0xe0, 0x5e,
            0x30, 0x9d, 0x3f, 0xec, 0xa0, 0xa7, 0xf1, 0xc6,
            0x09, 0x64, 0xfa, 0x60, 0x6b, 0xba, 0x53, 0xc3,
            0x0a, 0x89, 0x5b, 0x86, 0x8b, 0xfe, 0xc9, 0x4e,
            0xb8, 0x06, 0xbb, 0x79, 0x44, 0x43, 0xb2, 0xfe,
            0x66, 0xc4, 0xfb, 0xc2, 0x60, 0xb1, 0xbd, 0x33,
            0x36, 0xfd, 0xc2, 0xc6, 0x24, 0x11, 0xa1, 0xa1,
            0xa2, 0x6b, 0x1d, 0xfd, 0x69, 0x3b, 0xc9, 0xed,
            0x62, 0xcb, 0xe8, 0x27, 0xba, 0x03, 0x32, 0xa7,
            0xdd, 0xa8, 0x1e, 0xd2, 0xa8, 0xa4, 0x3e, 0xe9,
            0xfa, 0x0b, 0x30, 0x2a, 0x11, 0x73, 0x88, 0x43,
            0xc7, 0x6d, 0x4b, 0x74, 0x86, 0xbd, 0x0c, 0x20,
            0xfb, 0xe1, 0xaf, 0x22, 0x05, 0x1e, 0x01, 0x29,
            0x6b, 0x29, 0x0e, 0x31, 0xa2, 0xba, 0xe4, 0x64,
            0x67, 0xf0, 0xb8, 0x12, 0x91, 0xff, 0xf1, 0x11,
            0xc0, 0x2e, 0x33, 0xbb, 0x7d, 0x50, 0xea, 0x1f,
            0x04, 0x8c, 0x41, 0x53, 0x0d, 0x31, 0x79, 0x15,
            0x4c, 0xf9, 0x48, 0x5d, 0x52, 0x49, 0x69, 0xde,
            0xab, 0x38, 0x7d, 0x74, 0x66, 0x43, 0x4d, 0x74,
            0xc6, 0xf3, 0x76, 0x9e, 0x21, 0x5c, 0xd7, 0x7c,
            0xe7, 0xef, 0xad, 0x02, 0x4e, 0x33, 0x41, 0x02,
            0x81, 0x81, 0x00, 0xe1, 0xa7, 0xc4, 0x76, 0x8a,
            0xed, 0x7b, 0x7e, 0x83, 0xff, 0xab, 0x29, 0x60,
            0x9c, 0x72, 0xc3, 0xb8, 0x2c, 0x25, 0x08, 0x7a,
            0xc3, 0xff, 0x64, 0x5c, 0xa7, 0xcf, 0xd3, 0x3e,
            0x72, 0xf5, 0xb0, 0x2a, 0x27, 0x62, 0x5f, 0x69,
            0x65, 0xcc, 0xa8, 0x34, 0x9f, 0x96, 0xa5, 0x09,
            0x02, 0xff, 0x20, 0x0d, 0xd0, 0x3a, 0x0f, 0xf2,
            0xe9, 0xe1, 0xad, 0x21, 0xa1, 0xc2, 0x64, 0x18,
            0x0f, 0xad, 0x40, 0xed, 0x8e, 0xcd, 0x31, 0x45,
            0x55, 0x6d, 0x38, 0x9f, 0xe3, 0xa1, 0x0d, 0x4a,
            0xb1, 0xc2, 0xad, 0xbf, 0x02, 0x6e, 0x95, 0xbb,
            0x4d, 0x34, 0xcb, 0x5c, 0x9b, 0x47, 0x1e, 0x9c,
            0x26, 0xc4, 0xd9, 0x97, 0x13, 0x07, 0x12, 0x8f,
            0x6c, 0x09, 0xa6, 0x63, 0x32, 0xd0, 0xf1, 0x96,
            0x35, 0xe0, 0x5a, 0x93, 0xe2, 0x04, 0x41, 0xe6,
            0xaf, 0x81, 0x0f, 0x6c, 0xe0, 0xdb, 0x51, 0x3c,
            0x73, 0x45, 0x1d, 0x02, 0x81, 0x81, 0x00, 0xc0,
            0xed, 0x09, 0x6e, 0xe0, 0x67, 0xaf, 0x65, 0x64,
            0xdd, 0x95, 0x79, 0xae, 0xe4, 0xb6, 0x58, 0x12,
            0xd4, 0xf1, 0x2d, 0x87, 0xdc, 0x5a, 0x69, 0x92,
            0x3b, 0xe3, 0x22, 0x93, 0x68, 0x75, 0x61, 0xd4,
            0xde, 0x1a, 0x60, 0x0b, 0xc7, 0xd3, 0xee, 0xd4,
            0xc0, 0x6a, 0xfc, 0x29, 0x7e, 0x11, 0x1b, 0x53,
            0x51, 0x96, 0xe1, 0x46, 0x25, 0xed, 0x48, 0xf0,
            0xee, 0xff, 0xb7, 0x38, 0x6c, 0x4b, 0x37, 0x6d,
            0xe8, 0x83, 0xa1, 0x42, 0x60, 0x2b, 0x92, 0xad,
            0xa4, 0xc0, 0x13, 0x49, 0xb3, 0xf8, 0xaf, 0xbe,
            0xfa, 0x11, 0x04, 0x97, 0xbe, 0xdd, 0x29, 0xd5,
            0xe4, 0xdf, 0xb3, 0xf2, 0xf9, 0xec, 0x15, 0xcf,
            0x84, 0x1f, 0x05, 0xc5, 0xd4, 0x83, 0xad, 0x5e,
            0xb7, 0x02, 0xc6, 0x21, 0x59, 0x19, 0x7d, 0xc4,
            0x7d, 0xf0, 0xa3, 0x73, 0x1e, 0xd8, 0x63, 0x79,
            0x1d, 0xb1, 0x38, 0xe7, 0x10, 0xa9, 0xf1, 0x02,
            0x81, 0x80, 0x30, 0xdf, 0x57, 0x0b, 0x9d, 0x97,
            0x45, 0xb1, 0xe7, 0x00, 0xce, 0x9f, 0x4d, 0x8f,
            0x54, 0xc3, 0xd2, 0xf5, 0xac, 0xa7, 0xa3, 0x7f,
            0x23, 0xa7, 0x26, 0xf2, 0x29, 0x6e, 0xc5, 0x0d,
            0xbc, 0xec, 0x84, 0x94, 0xb7, 0x17, 0x97, 0x0a,
            0x37, 0x43, 0x0e, 0xf2, 0xa9, 0x7b, 0xe0, 0xf1,
            0xc7, 0x33, 0xb8, 0x0a, 0x2b, 0x29, 0x1d, 0x21,
            0x4e, 0x81, 0x62, 0xd1, 0x57, 0xfa, 0xb9, 0xc3,
            0x5b, 0x70, 0xbe, 0x82, 0xb9, 0x2a, 0x3c, 0xab,
            0xfd, 0xd5, 0xcf, 0xbb, 0x4b, 0x3c, 0x47, 0xbb,
            0x2c, 0x40, 0xd9, 0x27, 0xbb, 0xaf, 0xae, 0x3b,
            0x50, 0x7d, 0xe2, 0xf6, 0xb6, 0x76, 0x88, 0xb7,
            0x54, 0xd7, 0x13, 0x83, 0x49, 0x7a, 0xd9, 0x99,
            0x3a, 0x95, 0xd0, 0xd2, 0x46, 0xb2, 0xac, 0x27,
            0xcb, 0x09, 0x93, 0x11, 0xd6, 0x7e, 0x37, 0x6a,
            0x37, 0x77, 0x91, 0xcb, 0x39, 0x74, 0xe4, 0xb4,
            0xca, 0x79, 0x02, 0x81, 0x80, 0x7e, 0x9a, 0x4e,
            0xa9, 0x6b, 0x2b, 0xbf, 0x87, 0x1b, 0x44, 0xe9,
            0xf5, 0x5b, 0x57, 0x0d, 0x6e, 0x08, 0x95, 0xa2,
            0xdb, 0x4d, 0x1f, 0xc6, 0x59, 0x27, 0x34, 0x93,
            0x9e, 0x39, 0xfb, 0xbf, 0xa3, 0xfe, 0xab, 0xed,
            0xc4, 0xff, 0x96, 0x17, 0xb6, 0xcf, 0xf8, 0xa1,
            0x7c, 0x6e, 0xc2, 0x22, 0xf9, 0xba, 0x98, 0x7d,
            0x19, 0xc2, 0x0d, 0xdb, 0x84, 0x15, 0x4f, 0xd1,
            0x91, 0x6b, 0xbe, 0x6d, 0x31, 0xa7, 0xb7, 0x80,
            0xc1, 0xcf, 0x2c, 0x0b, 0x0c, 0x0b, 0x55, 0x65,
            0x12, 0x83, 0x38, 0x4e, 0x47, 0x0e, 0x5d, 0x4d,
            0xd3, 0xa4, 0xbd, 0x04, 0xa7, 0x92, 0x8c, 0xca,
            0x5c, 0x6d, 0x63, 0xa2, 0x90, 0xc1, 0x88, 0x23,
            0x4f, 0x87, 0x7e, 0x29, 0x17, 0x19, 0x63, 0xa1,
            0xb7, 0x61, 0x64, 0xf5, 0xfc, 0x79, 0x78, 0x67,
            0xf4, 0xea, 0xf3, 0xdf, 0xee, 0x8f, 0x29, 0x74,
            0x06, 0x32, 0x63, 0xd6, 0x11, 0x02, 0x81, 0x81,
            0x00, 0x9c, 0x2c, 0x77, 0xb4, 0x8e, 0xe5, 0x12,
            0xbe, 0x36, 0x65, 0xfe, 0xef, 0x41, 0x41, 0x06,
            0xa4, 0x1a, 0xb0, 0x69, 0xde, 0xdd, 0x6b, 0x3a,
            0x9f, 0xe7, 0xa7, 0x29, 0x80, 0x55, 0xb9, 0x5c,
            0xe7, 0x74, 0x8f, 0x25, 0x0e, 0x88, 0x68, 0x8b,
            0xdc, 0x38, 0x85, 0xf1, 0xec, 0xd6, 0x79, 0xf5,
            0x56, 0xf4, 0xb2, 0x9e, 0xaf, 0x72, 0xe2, 0x62,
            0xe9, 0x20, 0x69, 0xcc, 0xeb, 0xe3, 0xc7, 0x76,
            0x48, 0xd5, 0xb1, 0xe6, 0xfb, 0xc2, 0x42, 0x15,
            0x0f, 0xff, 0xe4, 0x16, 0xd2, 0xfc, 0x75, 0x16,
            0xd9, 0xd4, 0x1f, 0x2d, 0x1f, 0xcb, 0x31, 0xc3,
            0xdf, 0xdf, 0xe0, 0x4b, 0xdc, 0x21, 0x68, 0x86,
            0xc7, 0xab, 0x5c, 0x5b, 0x69, 0x19, 0x0a, 0xa6,
            0x8d, 0xb9, 0x93, 0x01, 0x3f, 0x52, 0xe3, 0xdb,
            0xc1, 0x2a, 0x9f, 0x6a, 0xb5, 0x9d, 0x3f, 0xea,
            0x22, 0xae, 0x29, 0x34, 0xb4, 0x4f, 0x9d, 0x0a,
            0xde
        };
        datum f{PRIVATE_KEY, PRIVATE_KEY + sizeof(PRIVATE_KEY)};

        private_key_info pkinfo{f};

        data_buffer<4096> dbuf;
        pkinfo.write(dbuf);
        datum result = dbuf.contents();

        // create second pkinfo from public key, then compare to original
        //
        rsa_private_key rsa_priv = pkinfo.get_rsa_private_key();
        private_key_info pkinfo2{rsa_priv};
        data_buffer<4096> dbuf2;
        pkinfo2.write(dbuf2);
        datum result2 = dbuf2.contents();

        if (dbuf != dbuf2) {
            if (verbose) {
                fprintf(stdout, "failure: result != result2\n          ");
                for (ssize_t i=0; i<std::min(dbuf.readable_length(), dbuf2.readable_length()); i++) {
                    if (dbuf.buffer[i] == dbuf2.buffer[i]) {
                        fprintf(stdout, "%02x", dbuf.buffer[i]);
                    } else {
                        fprintf(stdout, "**");
                    }
                }
                fputc('\n', stdout);
                fprintf(stdout, "result:   "); result.fprint_hex(stdout); fputc('\n', stdout);
                fprintf(stdout, "result2:  "); result2.fprint_hex(stdout); fputc('\n', stdout);
            }
            return false;
        }

        return true;
    }

    static inline bool unit_test_passed = rsa_private_key::unit_test();
#endif // NDEBUG not defined

};

[[maybe_unused]] static bool write_pem(FILE *f, const uint8_t *data, size_t length, const char *label="RSA PRIVATE KEY") {

    const char opening_line[] = "-----BEGIN ";
    const char closing_line[] = "-----END ";

    int chars_written = fprintf(f, "%s%s-----\n", opening_line, label);
    if (chars_written != (int)(strlen(opening_line) + strlen(label) + 6)) {
        return false; // error: could not write to file
    }
    std::string b64 = base64_encode(data, length);
    const char *data_end = b64.data() + b64.length();
    for (char *c=b64.data(); c < data_end; c+=64) {
        int ll = (c + 64 < data_end) ? 64 : data_end - c;
        fprintf(f, "%.*s\n", ll, c);
    }
    fprintf(f, "%s%s-----\n", closing_line, label);

    return true;
}

#endif // PKCS8_HPP
